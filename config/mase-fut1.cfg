# mase-fut1.cfg - MASE configuration for future uarch.

# FETCH OPTIONS
#
-fetch:speed      2      # speed of front-end of machine relative to execution core
-fetch:mult_lines false  # allows instructions to be fetched from multiple cache lines in same cycle
-fetch:mf_compat  false  # optimistic misfetch recovery

# IFQ OPTIONS
#
-ifq:size         88     # instruction fetch queue size (in insts)
-ifq:delay        3      # instruction fetch queue delay (in cycles)

# BRANCH PREDICTOR PARAMETERS
#
# There are several types of branch predictors:
#
# nottaken - always predict not taken
# taken    - always predict taken
# perfect  - always make the correct choice (oracle)
# bimod    - bimodal predictor
# 2lev     - two level predictor
# comb     - combination of bimodal and two level predictors
#
-bpred             2lev       # branch predictor type {nottaken|taken|perfect|bimod|2lev|comb}
-bpred:bimod       4096       # bimodal predictor config (<table size>)
-bpred:2lev        1 8192 8 1 # 2-level predictor config (<l1size> <l2size> <hist_size> <xor_flag>)
-bpred:comb        4096       # comb predictor config (<meta_table_size>)
-bpred:ras         16         # return address stack size (0 for no return stack)
-bpred:btb         1024 4     # BTB config (<num_sets> <associativity>)
-bpred:spec_update ID         # speculative predictors update in {ID|WB} (default non-spec)
-bpred:rcvr_shadow true       # allows recovery in the shadow of a misprediction

# MACHINE WIDTHS (insts / cycle)
#
-decode:width      8      # instruction decode B/W (insts/cycle)
-issue:width       8      # instruction issue B/W (insts/cycle)
-commit:width      8      # instruction commit B/W (insts/cycle)

# ISSUE OPTIONS
#
-issue:inorder     false  # run pipeline with in-order issue
-issue:wrongpath   true   # issue instructions down wrong paths caused by control mispredictions

# REGISTER SCHEDULER OPTIONS
#
-rob:size          128    # reorder buffer (ROB) size
-rs:size           64     # number of reservation stations
-scheduler:delay   0      # cycles to perform regfile access
-scheduler:replay  false  # use scheduler replay  

# MEMORY SCHEDULER OPTIONS
#
-lsq:size          64     # load/store queue (LSQ) size
-lsq:perfect       true   # perfect memory disambiguation
-lsq:blind         false  # use blind speculation for loads

# CACHE OPTIONS
#
# Caches are specified as follows:
# name:sets:line size:associativity:replacement policy
#
# The replacement policy can be:
# l - LRU
# f - FIFO
# r - random
#
-cache:dl1       dl1:512:32:4:l    # l1 data cache config, i.e., {<config>|none}
-cache:dl1lat    1                 # l1 data cache hit latency (in cycles)
-cache:dl2       ul2:2048:64:4:l   # l2 data cache config, i.e., {<config>|none}
-cache:dl2lat    6                 # l2 data cache hit latency (in cycles)
-cache:il1       il1:512:32:2:l    # l1 inst cache config, i.e., {<config>|dl1|dl2|none}
-cache:il1lat    1                 # l1 instruction cache hit latency (in cycles)
-cache:il2       dl2               # l2 instruction cache config, i.e., {<config>|dl2|none}
-cache:il2lat    6                 # l2 instruction cache hit latency (in cycles)
-cache:flush     false             # flush caches on system calls
-cache:icompress false             # convert 64-bit inst addresses to 32-bit inst equivalents

# MEMORY OPTIONS
#
-mem:lat         80 1      # memory access latency (<first_chunk> <inter_chunk>)
-mem:width       16        # memory access bus width (in bytes)

# TLB OPTIONS
#
# TLB configurations are specified the same way as caches are.
#
-tlb:itlb        itlb:16:4096:4:l  # instruction TLB config, i.e., {<config>|none}
-tlb:dtlb        dtlb:32:4096:4:l  # data TLB config, i.e., {<config>|none}
-tlb:lat         30                # inst/data TLB miss latency (in cycles)

# RESOURCE OPTIONS
#
-res:ialu          4       # total number of integer ALU's available
-res:imult         1       # total number of integer multiplier/dividers available
-res:memport       2       # total number of memory system ports available (to CPU)
-res:fpalu         4       # total number of floating point ALU's available
-res:fpmult        1       # total number of floating point multiplier/dividers available
-res:ialu_oplat    1       # latency of integer ALU operations
-res:ialu_islat    1       # issue latency of integer ALU operations
-res:imul_oplat    7       # latency of integer MUL operations
-res:imul_islat    1       # issue latency of integer MUL operations
-res:idiv_oplat    12      # latency of integer DIV operations
-res:idiv_islat    9       # issue latency of integer DIV operations
-res:read_oplat    1       # latency of read port  
-res:read_islat    1       # issue latency of read port
-res:write_oplat   1       # latency of write port 
-res:write_islat   1       # issue latency of write port
-res:fadd_oplat    4       # latency of FP ADD operations
-res:fadd_islat    1       # issue latency of FP ADD operations
-res:fcmp_oplat    4       # latency of FP CMP operations
-res:fcmp_islat    1       # issue latency of FP CMP operations
-res:fcvt_oplat    3       # latency of FP CVT operations
-res:fcvt_islat    1       # issue latency of FP CVT operations
-res:fmul_oplat    4       # latency of FP MUL operations
-res:fmul_islat    1       # issue latency of FP MUL operations
-res:fdiv_oplat    12      # latency of FP DIV operations
-res:fdiv_islat    9       # issue latency of FP DIV operations
-res:fsqrt_oplat   18      # latency of FP SQRT operations
-res:fsqrt_islat   15      # issue latency of FP SQRT operations

# CHECKER OPTIONS
#
-chk:inject_err    false   # randomly inject errors into checker
-chk:print_err     false   # print checker error messages
-chk:stop_on_err   false   # stop on checker errors
-chk:threshold     1.0000  # prints warning if % of checker errors exceeds threshold
